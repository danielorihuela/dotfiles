# -*- after-save-hook: (org-babel-tangle) -*-
#+property: header-args:emacs-lisp :exports code :results none :tangle init.el

* Table of Contents                                                :TOC_5_gh:
- [[#notes][Notes]]
- [[#package-management][Package Management]]
- [[#garbage-collector-optimization][Garbage Collector optimization]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
- [[#auto-save-files][Auto save files]]
- [[#search-and-completion][Search and completion]]
- [[#org-mode][Org Mode]]
  - [[#org][Org]]
  - [[#org-babel][Org Babel]]
  - [[#writing-research-in-latex][Writing Research in LaTeX]]
  - [[#table-of-contents][Table Of Contents]]
- [[#other-tools][Other Tools]]
  - [[#which-key][Which key]]
  - [[#evil-mode][Evil mode]]
- [[#ide][IDE]]
  - [[#magit][Magit]]
  - [[#rust][Rust]]
  - [[#tree-navigation][Tree navigation]]

* Notes

Drawer with the property ":tangle no" avoids exporting all the source code
blocks of the tree. I use it to "disable" tools that I used for a specific
purpose and that I'm no longer using.

* Package Management

Install =straight.el= and =use-package= to manage package configuration.
The first startup will take a long time. Relax, =straight.el= is cloning
all the repositories. Just wait.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
  (setq straight-check-for-modifications nil)
#+end_src

* Garbage Collector optimization

Optimize garbage collector as doom emacs. Check https://github.com/doomemacs/doomemacs/blob/986398504d09e585c7d1a8d73a6394024fe6f164/lisp/doom-start.el#L90.

#+begin_src emacs-lisp
  (use-package gcmh)
  (setq gcmh-idle-delay 'auto
        gcmh-auto-idle-delay-factor 10
        gcmh-high-cons-threshold (* 16 1024 1024))
#+end_src

* UI

** Theme

#+begin_src emacs-lisp
  (use-package monokai-theme)
  (load-theme 'monokai t)
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

* Auto save files

#+begin_src emacs-lisp
(make-directory "~/.emacs.d/autosaves/" t)
(setq backup-directory-alist '((".*" . "~/.emacs.d/autosaves")))
#+end_src

* Search and completion

- Vertico    -> Show command completions as I type
- Consult    -> Provides search and navigation commands
- Marginalia -> Adds annotations
- Corfu      -> Adds autocompletion

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init (vertico-mode))

  (use-package consult
    :bind (("C-s" . consult-line)))

  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))

  (use-package corfu
    :init (global-corfu-mode)
    :custom
    (corfu-auto t))
#+end_src

* Org Mode

** Org

Load the org package and configure it.

=org-indent-mode= indents each section (i.e. the text under a headline).
=visual-line-mode= wraps the text in the windows, instead of having one long line that continues outside the windows.

#+begin_src emacs-lisp
  (defun do/org-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :straight (:type built-in)
    :hook
    ((org-mode . do/org-setup)
     (org-agenda-mode . org-agenda-entry-text-mode))
    :config
    (setq org-todo-keywords
          '((sequence "TODO" "DOING" "HOLD" "|" "CANCELLED" "DONE")))
    (setq org-agenda-files (directory-files-recursively "~/knowledge/" "\\.org$"))
    (setq org-agenda-span 14))

  (use-package org-bullets
    :after org
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src

** Org Babel

#+begin_src emacs-lisp
  (use-package ob
    :straight (:type built-in)
    :after org
    :init
    (setq org-babel-python-command "python3")
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (shell . t)
       (ditaa . t))))
#+end_src

** Writing Research in LaTeX
:properties:
:header-args: :tangle no
:end:

We can export =org-mode= to =LaTeX=, the markup language used by some
PhDs and students (at least in the computer science field) to write
their thesis and researchs.

The export outputs a lot of intermediate files, but we can remove them.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-latex-logfiles-extensions
          (quote ("aux" "bbl" "blg" "fdb_latexmk" "fls" "out" "toc" "lof" "tex"))))
#+end_src

We can handle citations with =org-ref=. We can insert citations from a
[[https://es.overleaf.com/learn/latex/Bibliography_management_with_bibtex][.bib]] file using =org-ref-insert-link=.

#+begin_src emacs-lisp
  (use-package org-ref
    :disabled
    :after org)
#+end_src

To show the bibliography, add the following to your org file.

#+begin_example
bibliographystyle:ieeetr
bibliography:ref.bib
#+end_example

** Table Of Contents

Automatically create and update a TOC. Create a headline
and add the tag ~:TOC_2:~ with =org-set-tags-command=, where
the number indicates the depth.

#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

* Other Tools

** Which key

UI panel to show all the possible completions of a key binding. For example, if you start pressing =C-c=, a panel will appear with the possible completions.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Evil mode

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-c-i-jump nil)
    :config (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init)
    :custom
    (evil-collection-setup-minibuffer t))
#+end_src

* IDE

** Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :mode "\\.rs\\'"
    :hook (rust-ts-mode . eglot-ensure))
#+end_src

Eglot uses =project.el=, which by default detects git-controlled directories.
When I tried to open a rust project inside a git repository like =aoc/2023/puzzle-01=,
=project.el= detected =aoc= as the root of the project instead of =puzzle-01=.
In that situation, eglot failed to start, of course.

The following snippet solves that. =project.el= will now take into account
=Cargo.toml= files to search for the root of the projects.

#+begin_src emacs-lisp
  (use-package project
    :straight (:type built-in)
    :init
    (setq project-vc-extra-root-markers '("Cargo.toml")))
#+end_src

** Tree navigation

#+begin_src emacs-lisp
  (use-package treemacs)
  (use-package treemacs-evil
    :after treemacs)
#+end_src
