* Table of Contents                                                :TOC_5_gh:
- [[#notes][Notes]]
- [[#basic-windows-configuration][Basic Windows Configuration]]
- [[#package-management][Package Management]]
- [[#garbage-collector-optimization][Garbage Collector optimization]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
- [[#search-and-completion][Search and completion]]
- [[#org-mode][Org Mode]]
  - [[#org][Org]]
  - [[#org-babel][Org Babel]]
  - [[#writing-research-in-latex][Writing Research in LaTeX]]
  - [[#table-of-contents][Table Of Contents]]
- [[#programming][Programming]]
  - [[#magit][Magit]]
  - [[#clojure][Clojure]]
- [[#other-tools][Other Tools]]
  - [[#which-key][Which key]]
  - [[#god-mode][God mode]]

* Notes

Drawer with the property ":tangle no" avoids exporting all the source code
blocks of the tree. I use it to "disable" tools that I used for a specific
purpose and that I'm no longer using.

* Basic Windows Configuration

- Disable the splash screen
- Disable some UI elements
- Display the line number
- Set fontsize to 18.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (column-number-mode)
  (set-face-attribute 'default nil :height 180)
  (toggle-frame-maximized)
#+end_src

* Package Management

Load =package=, set up the repositories and initialize the package system.
Install =use-package= and load it. This package is used to manage package configuration.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Garbage Collector optimization

Optimize garbage collector as doom emacs. Check https://github.com/doomemacs/doomemacs/blob/986398504d09e585c7d1a8d73a6394024fe6f164/lisp/doom-start.el#L90.

#+begin_src emacs-lisp
  (use-package gcmh)
  (setq gcmh-idle-delay 'auto  ; default is 15s
        gcmh-auto-idle-delay-factor 10
        gcmh-high-cons-threshold (* 16 1024 1024))  ; 16mb
  (add-hook 'doom-first-buffer-hook #'gcmh-mode)
#+end_src

* UI

** Theme

#+begin_src emacs-lisp
;;  (use-package flatland-theme
;;    :config
;;    (load-theme 'flatland t))
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

* Search and completion

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init (vertico-mode))

  (use-package consult
    :bind (("C-s" . consult-line)))

  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+end_src

* Org Mode

** Org

Load the org package and configure it.

=org-indent-mode= indents each section (i.e. the text under a headline).
=visual-line-mode= wraps the text in the windows, instead of having one long line that continues outside the windows.

#+begin_src emacs-lisp
  (defun do/org-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :hook
    ((org-mode . do/org-setup)
     (org-agenda-mode . org-agenda-entry-text-mode))
    :config
    (setq org-todo-keywords
          '((sequence "TODO" "NEXT" "HOLD" "|" "CANCELLED" "DONE")))
    (setq org-agenda-files (directory-files-recursively "~/knowledge/" "\\.org$"))
    (setq org-agenda-span 14))
#+end_src

** Org Babel

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-babel-python-command "python3")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (shell . t)
       (ditaa . t))))
#+end_src

** Writing Research in LaTeX
:properties:
:header-args: :tangle no
:end:

We can export =org-mode= to =LaTeX=, the markup language used by some
PhDs and students (at least in the computer science field) to write
their thesis and researchs.

The export outputs a lot of intermediate files, but we can remove them.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-latex-logfiles-extensions
          (quote ("aux" "bbl" "blg" "fdb_latexmk" "fls" "out" "toc" "lof" "tex"))))
#+end_src

We can handle citations with =org-ref=. We can insert citations from a
[[https://es.overleaf.com/learn/latex/Bibliography_management_with_bibtex][.bib]] file using =org-ref-insert-link=.

#+begin_src emacs-lisp
  (use-package org-ref
    :disabled
    :after org)
#+end_src

To show the bibliography, add the following to your org file.

#+begin_example
bibliographystyle:ieeetr
bibliography:ref.bib
#+end_example

** Table Of Contents

Automatically create and update a TOC. Create a headline
and add the tag ~:TOC_2:~ with =org-set-tags-command=, where
the number indicates the depth.

#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src


* Programming

** Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode "\\.clj\\'")
  (use-package cider
    :after clojure-mode)
#+end_src

* Other Tools

** Which key

UI panel to show all the possible completions of a key binding. For example, if you start pressing =C-c=, a panel will appear with the possible completions.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

** God mode

#+begin_src emacs-lisp
  (defun update-cursor-type ()
    (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

  (use-package god-mode
    :init
    (add-hook 'post-command-hook #'update-cursor-type)
    :config
    (global-set-key (kbd "<escape>") #'god-local-mode)
    (define-key god-local-mode-map (kbd "i") #'god-local-mode)
    (define-key god-local-mode-map (kbd ".") #'repeat)
    (global-set-key (kbd "C-x C-1") #'delete-other-windows)
    (global-set-key (kbd "C-x C-2") #'split-window-below)
    (global-set-key (kbd "C-x C-3") #'split-window-right)
    (global-set-key (kbd "C-x C-0") #'delete-window))
#+end_src
