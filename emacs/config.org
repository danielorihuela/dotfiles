* Table of Contents                                                :TOC_5_gh:
- [[#package-management][Package Management]]
- [[#ui][UI]]
  - [[#basic-windows-configuration][Basic Windows Configuration]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
- [[#search-and-completion][Search and completion]]
- [[#org-mode][Org Mode]]
  - [[#org][Org]]
  - [[#org-babel][Org Babel]]
  - [[#latex][Latex]]
  - [[#bibliography-references][Bibliography references]]
- [[#second-brain-and-blog][Second brain and blog]]
  - [[#org-roam][Org Roam]]
- [[#programming][Programming]]
  - [[#magit][Magit]]
  - [[#clojure][Clojure]]
- [[#other-tools][Other Tools]]
  - [[#which-key][Which key]]
  - [[#evil-mode-vim-keybindings][Evil Mode (Vim keybindings)]]
  - [[#god-mode][God mode]]
- [[#automatic-toc-creation-package][Automatic TOC creation package]]

* Package Management

Load =package=, set up the repositories and initialize the package system.
Install =use-package= and load it. This package is used to manage package configuration.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (setq warning-suppress-log-types '((package reinitialization)))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* UI

** Basic Windows Configuration

- Disable the splash screen
- Disable some UI elements
- Display the line number
- Set fontsize to 18.

#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (column-number-mode)
  (set-face-attribute 'default nil :height 180)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package flatland-theme
    :config
    (load-theme 'flatland t))
#+end_src

** Modeline

Install the doom modeline along with the required icons and fonts.
The fonts will only be installed the first time, this is a [[https://github.com/domtronn/all-the-icons.el/issues/120][workaround]].

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+end_src

* Search and completion

#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                :map minibuffer-local-map)
    :custom
    (vertico-cycle t)
    :init (vertico-mode))

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line)))

  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+end_src

* Org Mode

** Org

Load the org package and configure it.

=org-indent-mode= indents each section (i.e. the text under a headline).
=visual-line-mode= wraps the text in the windows, instead of having one long line that continues outside the windows.

#+begin_src emacs-lisp
  (defun do/org-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :hook
    ((org-mode . do/org-setup)
     (org-agenda-mode . org-agenda-entry-text-mode))
    :config
    (setq org-todo-keywords
          '((sequence "TODO" "NEXT" "HOLD" "|" "CANCELLED" "DONE")))
    (setq org-agenda-files (directory-files-recursively "~/knowledge/" "\\.org$"))
    (setq org-agenda-span 14))
#+end_src

** Org Babel

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-babel-python-command "python3")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (shell . t)
       (ditaa . t))))
#+end_src

** Latex

Commands to export =org-mode= to *latex* and remove the intermediate generated files.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist"))))
#+end_src

** Bibliography references

This package will handle the references for us. We only need to create a reference file (e.g. ref.bib). Then, to show the bibliography add the following lines to your org file.

#+begin_example
bibliographystyle:ieeetr
bibliography:ref.bib
#+end_example

#+begin_src emacs-lisp
  (use-package org-ref
    :after org)
#+end_src

* Second brain and blog

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :init
    :custom
    (org-roam-directory (file-truename "~/knowledge/brain"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src


* Programming

** Magit

Git client.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode "\\.clj\\'")
  (use-package cider
    :after clojure-mode)
#+end_src

* Other Tools

** Which key

UI panel to show all the possible completions of a key binding. For example, if you start pressing =C-c=, a panel will appear with the possible completions.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Evil Mode (Vim keybindings)

Enable vim modal key bindings. Modify *j* and *k* motion to work on wrapped lines.

#+begin_src emacs-lisp
  ;;(use-package evil
  ;;:init
  ;;(setq evil-want-integration t)
  ;;(setq evil-want-keybinding nil)
  ;;:config
  ;;(evil-mode 1)
  ;;(define-key evil-motion-state-map (kbd "RET") nil)
  ;;(evil-define-key 'normal evil-jumper-mod-map (kbd "TAB") nil)
  ;;(evil-global-set-key 'motion "j" 'evil-next-visual-line)
  ;;(evil-global-set-key 'motion "k" 'evil-previous-visual-line))
  ;;
  ;;(use-package evil-collection
  ;;:after evil
  ;;:config
  ;;(evil-collection-init))
#+end_src

** God mode

#+begin_src emacs-lisp
  (defun update-cursor-type ()
    (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

  (use-package god-mode
    :init
    (add-hook 'post-command-hook #'update-cursor-type)
    :config
    (global-set-key (kbd "<escape>") #'god-local-mode)
    (define-key god-local-mode-map (kbd "i") #'god-local-mode)
    (define-key god-local-mode-map (kbd ".") #'repeat)
    (global-set-key (kbd "C-x C-1") #'delete-other-windows)
    (global-set-key (kbd "C-x C-2") #'split-window-below)
    (global-set-key (kbd "C-x C-3") #'split-window-right)
    (global-set-key (kbd "C-x C-0") #'delete-window))
#+end_src

* Automatic TOC creation package

This package allows to automatically update the *TOC* on save.

#+begin_src emacs-lisp
  ;;(use-package org-make-toc
  ;;:hook (org-mode . org-make-toc-mode)
  ;;:custom
  ;;(org-make-toc-link-type-fn #'org-make-toc--link-entry-org))
#+end_src

#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src
