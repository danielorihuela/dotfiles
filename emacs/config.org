* Table of Contents
:PROPERTIES:
:TOC:      :include all :depth 5 :force (depth) :ignore this :local (nothing)
:END:
:CONTENTS:
- [[#package-management][Package Management]]
- [[#ui][UI]]
  - [[#basic-windows-configuration][Basic Windows Configuration]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
- [[#org-mode][Org Mode]]
  - [[#org][Org]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-babel][Org Babel]]
  - [[#latex][Latex]]
  - [[#restructuredtext][reStructuredText]]
  - [[#bibliography-references][Bibliography references]]
- [[#programming][Programming]]
  - [[#magit][Magit]]
  - [[#clojure][Clojure]]
  - [[#ide-experience][IDE experience]]
    - [[#isolate-libraries-in-environment][Isolate libraries in environment]]
    - [[#lsp-mode][LSP mode]]
    - [[#c-mode][C mode]]
- [[#search-and-completion][Search and completion]]
- [[#other-tools][Other Tools]]
  - [[#which-key][Which key]]
  - [[#evil-mode-vim-keybindings][Evil Mode (Vim keybindings)]]
- [[#automatic-toc-creation-package][Automatic TOC creation package]]
:END:


* Package Management

Load =package=, set up the repositories and initialize the package system.
Install =use-package= and load it. This package is used to manage package configuration.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (setq warning-suppress-log-types '((package reinitialization)))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* UI

** Basic Windows Configuration

- Disable the splash screen
- Disable some UI elements
- Display the line number
- Set fontsize to 18.

#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (column-number-mode)
  (set-face-attribute 'default nil :height 180)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :config
    (load-theme 'sanityinc-tomorrow-eighties t))
#+end_src

** Modeline

Install the doom modeline along with the required icons and fonts.
The fonts will only be installed the first time, this is a [[https://github.com/domtronn/all-the-icons.el/issues/120][workaround]].

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))
#+end_src

* Org Mode

** Org

Load the org package and configure it.

=org-indent-mode= indents each section (i.e. the text under a headline).
=visual-line-mode= wraps the text in the windows, instead of having one long line that continues outside the windows.

#+begin_src emacs-lisp
  (defun do/org-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :hook
    ((org-mode . do/org-setup)
     (org-agenda-mode . org-agenda-entry-text-mode))
    :config
    (setq org-todo-keywords
          '((sequence "TODO" "NEXT" "HOLD" "|" "CANCELLED" "DONE")))
    (setq org-agenda-files '("~/Desktop/emacs"))
    (plist-put org-format-latex-options :scale 2.0))
#+end_src

** Org Agenda

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-agenda-span 14))
#+end_src

** Org Babel

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-babel-python-command "python3")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (shell . t))))
#+end_src

** Latex

Commands to export =org-mode= to *latex* and remove the intermediate generated files.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist"))))
#+end_src

** reStructuredText

ox-rst is an export backend to generate rST files.

#+begin_src emacs-lisp
  (use-package ox-rst
    :after org)
#+end_src

** Bibliography references

This package will handle the references for us. We only need to create a reference file (e.g. ref.bib). Then, to show the bibliography add the following lines to your org file.

#+begin_example
bibliographystyle:ieeetr
bibliography:ref.bib
#+end_example

#+begin_src emacs-lisp
  (use-package org-ref
    :after org)
#+end_src

* Programming

** Magit

Git client.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode "\\.clj\\'")
  (use-package cider
    :after clojure-mode)
#+end_src

** IDE experience

*** Isolate libraries in environment 

The IDE experience requires libraries for the different languages and tools. We will use pyenv to isolate them and do not have compatiblity issues with our system.

pyenv gives us the ability to select an environment with =pyvenv-workon=. In our case, we are using conda. By default, we will load the *emacs* environment.

I based this on [[https://ddavis.io/posts/emacs-python-lsp/][ddavis post]], but changed pyenv for miniconda.

#+begin_src emacs-lisp
  (use-package pyvenv
    :init
    (setenv "WORKON_HOME" "~/miniconda3/envs"))

  (with-eval-after-load 'pyvenv
    (pyvenv-workon "emacs"))
#+end_src

*** LSP mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands lsp)
#+end_src

*** C mode

#+begin_src emacs-lisp
  (setq-default c-basic-offset 4
                tab-width 4
                indent-tabs-mode t)
#+end_src

* Search and completion

#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode))

  (use-package corfu
    :after vertico)

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line)))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

* Other Tools

** Which key

UI panel to show all the possible completions of a key binding. For example, if you start pressing =C-c=, a panel will appear with the possible completions.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

** Evil Mode (Vim keybindings)

Enable vim modal key bindings. Modify *j* and *k* motion to work on wrapped lines.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (evil-define-key 'normal evil-jumper-mod-map (kbd "TAB") nil)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;;(with-eval-after-load 'evil-maps
  ;;(define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

* Automatic TOC creation package

This package allows to automatically update the *TOC* on save.

#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src
